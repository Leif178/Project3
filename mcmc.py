import numpy as npimport tqdmimport numpy.randomfrom matplotlib import pyplot as pltj0p=15j0m=3j1p=75j1m=100def post(x,y):    return np.exp(-2*j0p*(1-x**2)-j0m*(1-y**2))/(np.exp(-2*j0p*(1-x**2)-2*j0m*(1-y**2))+np.exp(-j1p*(x**2)-j1m*(y**2)))   def proposal(x,y):    return [np.random.uniform(low = -1), np.random.uniform(low = -1)]    def mcmc(initial, post, prop, iterations):    x = [initial]    p = [post(x[-1][0],x[-1][1])]    for i in tqdm.tqdm(range(iterations)):        x_test = prop(x[-1][0],x[-1][1])        p_test = post(x_test[0],x_test[1])        acc = p_test / p[-1]        u = np.random.uniform(0, 1)        if u <= acc and abs(x_test[0])<=1 and abs(x_test[1])<=1:            x.append(x_test)            p.append(p_test)    return x, p    chain, prob = mcmc([1,1], post, proposal, 1000000)chainx = []chainy = []chainr = []for item in chain:    chainx.append(item[0])    chainy.append(item[1])    chainr.append(np.sqrt(item[0]**2+item[1]**2))plt.figure()plt.title("Evolution of the walker")plt.plot(chainr)plt.ylabel('reff-value')plt.xlabel('Iteration')'''plt.figure()plt.title("Evolution of the walker")plt.plot(chainy)plt.ylabel('y-value')plt.xlabel('Iteration')'''plt.figure()plt.title("Evolution of the walker")plt.plot(chainr)plt.xlim(0, 50)plt.ylabel('reff-value')plt.xlabel('Iteration')plt.figure()plt.hist2d(chainx,chainy, bins = 100)plt.xlim(-1, 1)plt.ylim(-1, 1)'''Gelman Rubin Statistic'''D=int(len(chainx)/2)L=len(chainx)-Dxbarx = 1/L*sum(chainx[D:])xbary = 1/L*sum(chainy[D:])grandmean = 1/2*(xbarx+xbary)B=L*((xbarx-grandmean)**2+(xbary-grandmean)**2)inchainvarx = 1/(L-1)*sum((np.array(chainx[D:])-xbarx)**2)inchainvary = 1/(L-1)*sum((np.array(chainy[D:])-xbary)**2)W = 1/2*(inchainvary+inchainvarx)R=((L-1)/L*W-1/L*B)/Wprint(R)plt.show()